// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/order_srv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Consensus_CoupDeAaaah_FullMethodName           = "/Consensus/CoupDeAaaah"
	Consensus_YeahImStillAliveBitch_FullMethodName = "/Consensus/YeahImStillAliveBitch"
)

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusClient interface {
	CoupDeAaaah(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoupDEtatResponse, error)
	YeahImStillAliveBitch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) CoupDeAaaah(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoupDEtatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoupDEtatResponse)
	err := c.cc.Invoke(ctx, Consensus_CoupDeAaaah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) YeahImStillAliveBitch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Consensus_YeahImStillAliveBitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
// All implementations must embed UnimplementedConsensusServer
// for forward compatibility.
type ConsensusServer interface {
	CoupDeAaaah(context.Context, *Empty) (*CoupDEtatResponse, error)
	YeahImStillAliveBitch(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedConsensusServer()
}

// UnimplementedConsensusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsensusServer struct{}

func (UnimplementedConsensusServer) CoupDeAaaah(context.Context, *Empty) (*CoupDEtatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoupDeAaaah not implemented")
}
func (UnimplementedConsensusServer) YeahImStillAliveBitch(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YeahImStillAliveBitch not implemented")
}
func (UnimplementedConsensusServer) mustEmbedUnimplementedConsensusServer() {}
func (UnimplementedConsensusServer) testEmbeddedByValue()                   {}

// UnsafeConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServer will
// result in compilation errors.
type UnsafeConsensusServer interface {
	mustEmbedUnimplementedConsensusServer()
}

func RegisterConsensusServer(s grpc.ServiceRegistrar, srv ConsensusServer) {
	// If the following call pancis, it indicates UnimplementedConsensusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Consensus_ServiceDesc, srv)
}

func _Consensus_CoupDeAaaah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).CoupDeAaaah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consensus_CoupDeAaaah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).CoupDeAaaah(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_YeahImStillAliveBitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).YeahImStillAliveBitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consensus_YeahImStillAliveBitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).YeahImStillAliveBitch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Consensus_ServiceDesc is the grpc.ServiceDesc for Consensus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consensus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoupDeAaaah",
			Handler:    _Consensus_CoupDeAaaah_Handler,
		},
		{
			MethodName: "YeahImStillAliveBitch",
			Handler:    _Consensus_YeahImStillAliveBitch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/order_srv.proto",
}
