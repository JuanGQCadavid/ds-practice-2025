// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/transaction_verification/transaction_verification.proto

package transaction_verification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionVerificationService_InitOrder_FullMethodName             = "/transaction.TransactionVerificationService/initOrder"
	TransactionVerificationService_CheckOrder_FullMethodName            = "/transaction.TransactionVerificationService/checkOrder"
	TransactionVerificationService_CheckUser_FullMethodName             = "/transaction.TransactionVerificationService/checkUser"
	TransactionVerificationService_CheckFormatCreditCard_FullMethodName = "/transaction.TransactionVerificationService/checkFormatCreditCard"
)

// TransactionVerificationServiceClient is the client API for TransactionVerificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionVerificationServiceClient interface {
	InitOrder(ctx context.Context, in *TransactionVerificationRequestInit, opts ...grpc.CallOption) (*TransactionVerificationResponse, error)
	CheckOrder(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error)
	CheckUser(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error)
	CheckFormatCreditCard(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error)
}

type transactionVerificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionVerificationServiceClient(cc grpc.ClientConnInterface) TransactionVerificationServiceClient {
	return &transactionVerificationServiceClient{cc}
}

func (c *transactionVerificationServiceClient) InitOrder(ctx context.Context, in *TransactionVerificationRequestInit, opts ...grpc.CallOption) (*TransactionVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponse)
	err := c.cc.Invoke(ctx, TransactionVerificationService_InitOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionVerificationServiceClient) CheckOrder(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponseClock)
	err := c.cc.Invoke(ctx, TransactionVerificationService_CheckOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionVerificationServiceClient) CheckUser(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponseClock)
	err := c.cc.Invoke(ctx, TransactionVerificationService_CheckUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionVerificationServiceClient) CheckFormatCreditCard(ctx context.Context, in *TransactionVerificationRequestClock, opts ...grpc.CallOption) (*TransactionVerificationResponseClock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponseClock)
	err := c.cc.Invoke(ctx, TransactionVerificationService_CheckFormatCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionVerificationServiceServer is the server API for TransactionVerificationService service.
// All implementations must embed UnimplementedTransactionVerificationServiceServer
// for forward compatibility.
type TransactionVerificationServiceServer interface {
	InitOrder(context.Context, *TransactionVerificationRequestInit) (*TransactionVerificationResponse, error)
	CheckOrder(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error)
	CheckUser(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error)
	CheckFormatCreditCard(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error)
	mustEmbedUnimplementedTransactionVerificationServiceServer()
}

// UnimplementedTransactionVerificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionVerificationServiceServer struct{}

func (UnimplementedTransactionVerificationServiceServer) InitOrder(context.Context, *TransactionVerificationRequestInit) (*TransactionVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOrder not implemented")
}
func (UnimplementedTransactionVerificationServiceServer) CheckOrder(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrder not implemented")
}
func (UnimplementedTransactionVerificationServiceServer) CheckUser(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedTransactionVerificationServiceServer) CheckFormatCreditCard(context.Context, *TransactionVerificationRequestClock) (*TransactionVerificationResponseClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFormatCreditCard not implemented")
}
func (UnimplementedTransactionVerificationServiceServer) mustEmbedUnimplementedTransactionVerificationServiceServer() {
}
func (UnimplementedTransactionVerificationServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionVerificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionVerificationServiceServer will
// result in compilation errors.
type UnsafeTransactionVerificationServiceServer interface {
	mustEmbedUnimplementedTransactionVerificationServiceServer()
}

func RegisterTransactionVerificationServiceServer(s grpc.ServiceRegistrar, srv TransactionVerificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionVerificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionVerificationService_ServiceDesc, srv)
}

func _TransactionVerificationService_InitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequestInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionVerificationServiceServer).InitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionVerificationService_InitOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionVerificationServiceServer).InitOrder(ctx, req.(*TransactionVerificationRequestInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionVerificationService_CheckOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequestClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionVerificationServiceServer).CheckOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionVerificationService_CheckOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionVerificationServiceServer).CheckOrder(ctx, req.(*TransactionVerificationRequestClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionVerificationService_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequestClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionVerificationServiceServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionVerificationService_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionVerificationServiceServer).CheckUser(ctx, req.(*TransactionVerificationRequestClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionVerificationService_CheckFormatCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequestClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionVerificationServiceServer).CheckFormatCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionVerificationService_CheckFormatCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionVerificationServiceServer).CheckFormatCreditCard(ctx, req.(*TransactionVerificationRequestClock))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionVerificationService_ServiceDesc is the grpc.ServiceDesc for TransactionVerificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionVerificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionVerificationService",
	HandlerType: (*TransactionVerificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initOrder",
			Handler:    _TransactionVerificationService_InitOrder_Handler,
		},
		{
			MethodName: "checkOrder",
			Handler:    _TransactionVerificationService_CheckOrder_Handler,
		},
		{
			MethodName: "checkUser",
			Handler:    _TransactionVerificationService_CheckUser_Handler,
		},
		{
			MethodName: "checkFormatCreditCard",
			Handler:    _TransactionVerificationService_CheckFormatCreditCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/transaction_verification/transaction_verification.proto",
}
