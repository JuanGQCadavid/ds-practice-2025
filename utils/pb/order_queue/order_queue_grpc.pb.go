// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: order_queue/order_queue.proto

package order_queue

import (
	context "context"
	common "github.com/JuanGQCadavid/ds-practice-2025/utils/pb/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderQueueService_Init_FullMethodName    = "/queue.OrderQueueService/init"
	OrderQueueService_Enqueue_FullMethodName = "/queue.OrderQueueService/enqueue"
	OrderQueueService_Dequeue_FullMethodName = "/queue.OrderQueueService/dequeue"
	OrderQueueService_Clean_FullMethodName   = "/queue.OrderQueueService/clean"
)

// OrderQueueServiceClient is the client API for OrderQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderQueueServiceClient interface {
	Init(ctx context.Context, in *common.InitRequest, opts ...grpc.CallOption) (*common.InitResponse, error)
	Enqueue(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error)
	Dequeue(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error)
	Clean(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error)
}

type orderQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueueServiceClient(cc grpc.ClientConnInterface) OrderQueueServiceClient {
	return &orderQueueServiceClient{cc}
}

func (c *orderQueueServiceClient) Init(ctx context.Context, in *common.InitRequest, opts ...grpc.CallOption) (*common.InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.InitResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) Enqueue(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NextResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) Dequeue(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NextResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) Clean(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NextResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_Clean_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueueServiceServer is the server API for OrderQueueService service.
// All implementations must embed UnimplementedOrderQueueServiceServer
// for forward compatibility.
type OrderQueueServiceServer interface {
	Init(context.Context, *common.InitRequest) (*common.InitResponse, error)
	Enqueue(context.Context, *common.NextRequest) (*common.NextResponse, error)
	Dequeue(context.Context, *common.NextRequest) (*common.NextResponse, error)
	Clean(context.Context, *common.NextRequest) (*common.NextResponse, error)
	mustEmbedUnimplementedOrderQueueServiceServer()
}

// UnimplementedOrderQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderQueueServiceServer struct{}

func (UnimplementedOrderQueueServiceServer) Init(context.Context, *common.InitRequest) (*common.InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedOrderQueueServiceServer) Enqueue(context.Context, *common.NextRequest) (*common.NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedOrderQueueServiceServer) Dequeue(context.Context, *common.NextRequest) (*common.NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedOrderQueueServiceServer) Clean(context.Context, *common.NextRequest) (*common.NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (UnimplementedOrderQueueServiceServer) mustEmbedUnimplementedOrderQueueServiceServer() {}
func (UnimplementedOrderQueueServiceServer) testEmbeddedByValue()                           {}

// UnsafeOrderQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueueServiceServer will
// result in compilation errors.
type UnsafeOrderQueueServiceServer interface {
	mustEmbedUnimplementedOrderQueueServiceServer()
}

func RegisterOrderQueueServiceServer(s grpc.ServiceRegistrar, srv OrderQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderQueueService_ServiceDesc, srv)
}

func _OrderQueueService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).Init(ctx, req.(*common.InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).Enqueue(ctx, req.(*common.NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).Dequeue(ctx, req.(*common.NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_Clean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).Clean(ctx, req.(*common.NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQueueService_ServiceDesc is the grpc.ServiceDesc for OrderQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.OrderQueueService",
	HandlerType: (*OrderQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _OrderQueueService_Init_Handler,
		},
		{
			MethodName: "enqueue",
			Handler:    _OrderQueueService_Enqueue_Handler,
		},
		{
			MethodName: "dequeue",
			Handler:    _OrderQueueService_Dequeue_Handler,
		},
		{
			MethodName: "clean",
			Handler:    _OrderQueueService_Clean_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_queue/order_queue.proto",
}
