// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: suggestions/suggestions.proto

package suggestions

import (
	context "context"
	common "github.com/JuanGQCadavid/ds-practice-2025/utils/pb/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookSuggestionsService_InitOrder_FullMethodName    = "/transaction.BookSuggestionsService/initOrder"
	BookSuggestionsService_SuggestBooks_FullMethodName = "/transaction.BookSuggestionsService/suggestBooks"
	BookSuggestionsService_CleanOrder_FullMethodName   = "/transaction.BookSuggestionsService/cleanOrder"
)

// BookSuggestionsServiceClient is the client API for BookSuggestionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookSuggestionsServiceClient interface {
	InitOrder(ctx context.Context, in *common.InitRequest, opts ...grpc.CallOption) (*common.InitResponse, error)
	SuggestBooks(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*BookSuggest, error)
	CleanOrder(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error)
}

type bookSuggestionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookSuggestionsServiceClient(cc grpc.ClientConnInterface) BookSuggestionsServiceClient {
	return &bookSuggestionsServiceClient{cc}
}

func (c *bookSuggestionsServiceClient) InitOrder(ctx context.Context, in *common.InitRequest, opts ...grpc.CallOption) (*common.InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.InitResponse)
	err := c.cc.Invoke(ctx, BookSuggestionsService_InitOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookSuggestionsServiceClient) SuggestBooks(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*BookSuggest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookSuggest)
	err := c.cc.Invoke(ctx, BookSuggestionsService_SuggestBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookSuggestionsServiceClient) CleanOrder(ctx context.Context, in *common.NextRequest, opts ...grpc.CallOption) (*common.NextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NextResponse)
	err := c.cc.Invoke(ctx, BookSuggestionsService_CleanOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookSuggestionsServiceServer is the server API for BookSuggestionsService service.
// All implementations must embed UnimplementedBookSuggestionsServiceServer
// for forward compatibility.
type BookSuggestionsServiceServer interface {
	InitOrder(context.Context, *common.InitRequest) (*common.InitResponse, error)
	SuggestBooks(context.Context, *common.NextRequest) (*BookSuggest, error)
	CleanOrder(context.Context, *common.NextRequest) (*common.NextResponse, error)
	mustEmbedUnimplementedBookSuggestionsServiceServer()
}

// UnimplementedBookSuggestionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookSuggestionsServiceServer struct{}

func (UnimplementedBookSuggestionsServiceServer) InitOrder(context.Context, *common.InitRequest) (*common.InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOrder not implemented")
}
func (UnimplementedBookSuggestionsServiceServer) SuggestBooks(context.Context, *common.NextRequest) (*BookSuggest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestBooks not implemented")
}
func (UnimplementedBookSuggestionsServiceServer) CleanOrder(context.Context, *common.NextRequest) (*common.NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanOrder not implemented")
}
func (UnimplementedBookSuggestionsServiceServer) mustEmbedUnimplementedBookSuggestionsServiceServer() {
}
func (UnimplementedBookSuggestionsServiceServer) testEmbeddedByValue() {}

// UnsafeBookSuggestionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookSuggestionsServiceServer will
// result in compilation errors.
type UnsafeBookSuggestionsServiceServer interface {
	mustEmbedUnimplementedBookSuggestionsServiceServer()
}

func RegisterBookSuggestionsServiceServer(s grpc.ServiceRegistrar, srv BookSuggestionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookSuggestionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookSuggestionsService_ServiceDesc, srv)
}

func _BookSuggestionsService_InitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSuggestionsServiceServer).InitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookSuggestionsService_InitOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSuggestionsServiceServer).InitOrder(ctx, req.(*common.InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookSuggestionsService_SuggestBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSuggestionsServiceServer).SuggestBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookSuggestionsService_SuggestBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSuggestionsServiceServer).SuggestBooks(ctx, req.(*common.NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookSuggestionsService_CleanOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookSuggestionsServiceServer).CleanOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookSuggestionsService_CleanOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookSuggestionsServiceServer).CleanOrder(ctx, req.(*common.NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookSuggestionsService_ServiceDesc is the grpc.ServiceDesc for BookSuggestionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookSuggestionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.BookSuggestionsService",
	HandlerType: (*BookSuggestionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initOrder",
			Handler:    _BookSuggestionsService_InitOrder_Handler,
		},
		{
			MethodName: "suggestBooks",
			Handler:    _BookSuggestionsService_SuggestBooks_Handler,
		},
		{
			MethodName: "cleanOrder",
			Handler:    _BookSuggestionsService_CleanOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suggestions/suggestions.proto",
}
