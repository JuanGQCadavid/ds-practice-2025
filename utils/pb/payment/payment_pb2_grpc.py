# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common import common_pb2 as common_dot_common__pb2
from payment import payment_pb2 as payment_dot_payment__pb2


class PaymentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.prepare = channel.unary_unary(
                '/payment.PaymentService/prepare',
                request_serializer=payment_dot_payment__pb2.PrepareRequest.SerializeToString,
                response_deserializer=common_dot_common__pb2.NextResponse.FromString,
                )
        self.commit = channel.unary_unary(
                '/payment.PaymentService/commit',
                request_serializer=payment_dot_payment__pb2.CommitRequest.SerializeToString,
                response_deserializer=common_dot_common__pb2.NextResponse.FromString,
                )
        self.abort = channel.unary_unary(
                '/payment.PaymentService/abort',
                request_serializer=payment_dot_payment__pb2.AbortRequest.SerializeToString,
                response_deserializer=common_dot_common__pb2.NextResponse.FromString,
                )


class PaymentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def prepare(self, request, context):
        """Prepare
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Commit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Abort
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.prepare,
                    request_deserializer=payment_dot_payment__pb2.PrepareRequest.FromString,
                    response_serializer=common_dot_common__pb2.NextResponse.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=payment_dot_payment__pb2.CommitRequest.FromString,
                    response_serializer=common_dot_common__pb2.NextResponse.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=payment_dot_payment__pb2.AbortRequest.FromString,
                    response_serializer=common_dot_common__pb2.NextResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payment.PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.PaymentService/prepare',
            payment_dot_payment__pb2.PrepareRequest.SerializeToString,
            common_dot_common__pb2.NextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.PaymentService/commit',
            payment_dot_payment__pb2.CommitRequest.SerializeToString,
            common_dot_common__pb2.NextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payment.PaymentService/abort',
            payment_dot_payment__pb2.AbortRequest.SerializeToString,
            common_dot_common__pb2.NextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
