# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from database import database_pb2 as database_dot_database__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in database/database_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.performStockRead = channel.unary_unary(
                '/database.DatabaseService/performStockRead',
                request_serializer=database_dot_database__pb2.StockRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StockResponse.FromString,
                _registered_method=True)
        self.performStockWrite = channel.unary_unary(
                '/database.DatabaseService/performStockWrite',
                request_serializer=database_dot_database__pb2.StockRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StockResponse.FromString,
                _registered_method=True)
        self.replicateWrite = channel.unary_unary(
                '/database.DatabaseService/replicateWrite',
                request_serializer=database_dot_database__pb2.ReplicationRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.getStatus = channel.unary_unary(
                '/database.DatabaseService/getStatus',
                request_serializer=database_dot_database__pb2.EmptyRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.prepare = channel.unary_unary(
                '/database.DatabaseService/prepare',
                request_serializer=database_dot_database__pb2.PrepareRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.commit = channel.unary_unary(
                '/database.DatabaseService/commit',
                request_serializer=database_dot_database__pb2.CommitRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.abort = channel.unary_unary(
                '/database.DatabaseService/abort',
                request_serializer=database_dot_database__pb2.AbortRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.AbortResponse.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def performStockRead(self, request, context):
        """Lectura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performStockWrite(self, request, context):
        """Escritura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicateWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Me dice quien es el leader
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepare(self, request, context):
        """Prepare
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Commit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Abort
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'performStockRead': grpc.unary_unary_rpc_method_handler(
                    servicer.performStockRead,
                    request_deserializer=database_dot_database__pb2.StockRequest.FromString,
                    response_serializer=database_dot_database__pb2.StockResponse.SerializeToString,
            ),
            'performStockWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.performStockWrite,
                    request_deserializer=database_dot_database__pb2.StockRequest.FromString,
                    response_serializer=database_dot_database__pb2.StockResponse.SerializeToString,
            ),
            'replicateWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.replicateWrite,
                    request_deserializer=database_dot_database__pb2.ReplicationRequest.FromString,
                    response_serializer=database_dot_database__pb2.ReplicationResponse.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=database_dot_database__pb2.EmptyRequest.FromString,
                    response_serializer=database_dot_database__pb2.StatusResponse.SerializeToString,
            ),
            'prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.prepare,
                    request_deserializer=database_dot_database__pb2.PrepareRequest.FromString,
                    response_serializer=database_dot_database__pb2.PrepareResponse.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=database_dot_database__pb2.CommitRequest.FromString,
                    response_serializer=database_dot_database__pb2.CommitResponse.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=database_dot_database__pb2.AbortRequest.FromString,
                    response_serializer=database_dot_database__pb2.AbortResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'database.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('database.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def performStockRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/performStockRead',
            database_dot_database__pb2.StockRequest.SerializeToString,
            database_dot_database__pb2.StockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def performStockWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/performStockWrite',
            database_dot_database__pb2.StockRequest.SerializeToString,
            database_dot_database__pb2.StockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def replicateWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/replicateWrite',
            database_dot_database__pb2.ReplicationRequest.SerializeToString,
            database_dot_database__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/getStatus',
            database_dot_database__pb2.EmptyRequest.SerializeToString,
            database_dot_database__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/prepare',
            database_dot_database__pb2.PrepareRequest.SerializeToString,
            database_dot_database__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/commit',
            database_dot_database__pb2.CommitRequest.SerializeToString,
            database_dot_database__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/abort',
            database_dot_database__pb2.AbortRequest.SerializeToString,
            database_dot_database__pb2.AbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
