# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from database import database_pb2 as database_dot_database__pb2


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initReplica = channel.unary_unary(
                '/database.DatabaseService/initReplica',
                request_serializer=database_dot_database__pb2.InitRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.InitResponse.FromString,
                )
        self.performStockRead = channel.unary_unary(
                '/database.DatabaseService/performStockRead',
                request_serializer=database_dot_database__pb2.StockRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StockResponse.FromString,
                )
        self.performStockWrite = channel.unary_unary(
                '/database.DatabaseService/performStockWrite',
                request_serializer=database_dot_database__pb2.StockRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StockResponse.FromString,
                )
        self.replicateWrite = channel.unary_unary(
                '/database.DatabaseService/replicateWrite',
                request_serializer=database_dot_database__pb2.ReplicationRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.ReplicationResponse.FromString,
                )
        self.getStatus = channel.unary_unary(
                '/database.DatabaseService/getStatus',
                request_serializer=database_dot_database__pb2.EmptyRequest.SerializeToString,
                response_deserializer=database_dot_database__pb2.StatusResponse.FromString,
                )


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def initReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performStockRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performStockWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicateWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.initReplica,
                    request_deserializer=database_dot_database__pb2.InitRequest.FromString,
                    response_serializer=database_dot_database__pb2.InitResponse.SerializeToString,
            ),
            'performStockRead': grpc.unary_unary_rpc_method_handler(
                    servicer.performStockRead,
                    request_deserializer=database_dot_database__pb2.StockRequest.FromString,
                    response_serializer=database_dot_database__pb2.StockResponse.SerializeToString,
            ),
            'performStockWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.performStockWrite,
                    request_deserializer=database_dot_database__pb2.StockRequest.FromString,
                    response_serializer=database_dot_database__pb2.StockResponse.SerializeToString,
            ),
            'replicateWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.replicateWrite,
                    request_deserializer=database_dot_database__pb2.ReplicationRequest.FromString,
                    response_serializer=database_dot_database__pb2.ReplicationResponse.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=database_dot_database__pb2.EmptyRequest.FromString,
                    response_serializer=database_dot_database__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'database.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def initReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/database.DatabaseService/initReplica',
            database_dot_database__pb2.InitRequest.SerializeToString,
            database_dot_database__pb2.InitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def performStockRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/database.DatabaseService/performStockRead',
            database_dot_database__pb2.StockRequest.SerializeToString,
            database_dot_database__pb2.StockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def performStockWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/database.DatabaseService/performStockWrite',
            database_dot_database__pb2.StockRequest.SerializeToString,
            database_dot_database__pb2.StockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replicateWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/database.DatabaseService/replicateWrite',
            database_dot_database__pb2.ReplicationRequest.SerializeToString,
            database_dot_database__pb2.ReplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/database.DatabaseService/getStatus',
            database_dot_database__pb2.EmptyRequest.SerializeToString,
            database_dot_database__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
