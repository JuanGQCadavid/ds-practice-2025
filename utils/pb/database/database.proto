syntax = "proto3";

package database;
option go_package = "github.com/JuanGQCadavid/ds-practice-2025/utils/pb/database";

service DatabaseService {
    rpc performStockRead (StockRequest) returns (StockResponse); // Lectura
    rpc performStockWrite (StockRequest) returns (StockResponse); // Escritura
    rpc replicateWrite (ReplicationRequest) returns (ReplicationResponse);
    rpc getStatus (EmptyRequest) returns (StatusResponse); // Me dice quien es el leader
    rpc prepare (PrepareRequest) returns (PrepareResponse); // Prepare
    rpc commit (CommitRequest) returns (CommitResponse); // Commit
    rpc abort (AbortRequest) returns (AbortResponse); // Abort
}

message InitRequest {
    string message = 1;
}

message InitResponse {
    string message = 1;
    bool isValid = 2;
}

message StockRequest {
    string bookID = 1;
    string bookName = 2;
    int32 bookStock = 3;
}

message StockResponse {
    string bookName = 1;
    int32 bookStock = 2;
    bool isValid = 3;
    string errMessage = 4;
    int64 leaderID = 5;
}

message ReplicationRequest {
    string bookID = 1;
    string bookName = 2;
    int32 bookStock = 3;
    int64 sourceReplicaID = 4;
}

message ReplicationResponse {
    bool isValid = 1;
    string errMessage = 2;
}

message StatusResponse {
    bool isLeader = 1;
    int64 replicaID = 2;
    int64 leaderID = 3;
}

message EmptyRequest {}

message BookRequestPrepare {
    string bookID = 1;
    int32 quantity = 2;
}

message PrepareRequest {
    repeated BookRequestPrepare bookRequests = 1;
    string orderID = 2;
}

message PrepareResponse {
    bool isValid = 1;
    repeated BookRequestPrepare bookRequests = 2;
}


message CommitRequest {
    string orderID = 1;
}

message CommitResponse {
    bool isValid = 1;
    string errMessage  = 2;
}

message AbortRequest {
    string orderID = 1;
}

message AbortResponse {
    bool isValid = 1;
    string errMessage = 2;
}